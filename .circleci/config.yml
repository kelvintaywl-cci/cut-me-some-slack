version: 2.1

orbs:
  # modified.
  # see https://github.com/CircleCI-Public/gcp-cli-orb/compare/master...kelvintaywl-cci:gcp-cli-orb:reinstall-untar
  gcp-cli-modified:
    version: 2.1
    description: |
        Easily install and configure the Google Cloud CLI (gcloud CLI).
        Supports the Docker and Machine executors.
    display:
        home_url: https://cloud.google.com/sdk
        source_url: https://github.com/CircleCI-Public/gcp-cli-orb
    commands:
        install:
            description: |
                Install the gcloud CLI. When installing within the Docker executor, the
                install will only occur if the CLI isn't already installed. If installing in
                a Linux machine image, it will remove the pre-installed version and instead
                install the version specified by this orb.
            parameters:
                components:
                    default: ""
                    description: |
                        The list of gcloud components to install. Space separated. See https://cloud.google.com/sdk/docs/components for additional info.
                    type: string
                version:
                    default: latest
                    description: |
                        The version of the gcloud CLI to install. If left to "latest", the latest version will be installed. Otherwise, provide the full version number as it appears in the URL on this page: https://cloud.google.com/sdk/docs/downloads-versioned-archives"
                    type: string
            steps:
                - run:
                    command: |
                        #!/usr/bin/env sh
                        # shellcheck disable=SC3043 # while "local" isn't POSIX, it's supported in many shells. See: https://www.shellcheck.net/wiki/SC3043

                        fetch_latest_version() {
                          local release_notes
                          local release_notes_exit_code

                          release_notes="$(curl --location --silent --fail --retry 3 https://cloud.google.com/sdk/docs/release-notes)"
                          release_notes_exit_code="$?"

                          [ "$release_notes_exit_code" -gt 0 ] && { printf '%s\n' "Failed to get release notes"; return "$release_notes_exit_code"; }

                          local releases
                          releases="$(printf '%s\n' "$release_notes" | grep -E '<h2 id=".*" data-text=".*">[0-9]+.[0-9]+.[0-9]+.*</h2>' | sed 's/<h2.*>\([0-9]*.[0-9]*.[0-9]*\).*<\/h2>/\1/')"

                          local latest_version
                          latest_version="$(printf '%s\n' "$releases" | head -n 1)"

                          [ -z "$latest_version" ] && { printf '%s\n' "Couldn't find out what is the latest version available."; return 1; }
                          version="$latest_version"
                        }

                        # $1: version
                        install() {
                          local arg_version="$1"
                          [ -z "$arg_version" ] && { printf '%s\n' "No version provided."; return 1; }

                          local install_dir
                          install_dir="$(mktemp -d)"

                          # after version 370, gcloud is called "cli" rather than "sdk"
                          major_version="$(echo "$1" | awk -F. '{print $1}')"
                          if [ "$major_version" -gt 370 ]; then url_path_fixture="cli"
                          else url_path_fixture="sdk"; fi

                          download_untar() {
                            curl --location --silent --fail --retry 3 --output "${install_dir}/google-cloud-sdk.tar.gz" "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-${url_path_fixture}-${arg_version}-linux-x86_64.tar.gz"
                            tar -xzf "${install_dir}/google-cloud-sdk.tar.gz" -C "$install_dir"
                          }

                          # retry 2 times, in case of corrupted zip downloaded
                          # see https://github.com/CircleCI-Public/gcp-cli-orb/issues/70
                          download_untar || download_untar || download_untar
                          printf '%s\n' ". ${install_dir}/google-cloud-sdk/path.bash.inc" >> "$BASH_ENV"

                          # If the envinronment is Alpine, remind the user to source $BASH_ENV in every step.
                          if [ -f /etc/os-release ] && grep -q "Alpine" "/etc/os-release"; then
                            printf '%s\n' "Alpine detected. Please make sure to source \$BASH_ENV in every step."
                            printf '%s\n' "Otherwise gcloud won't be available."
                            printf '%s\n' "You can do this by adding the following line in the beginning of your command:"
                            printf '%s\n' "\". \$BASH_ENV\""

                            # Alpine also needs a workaround since Google's "path.bash.inc" doesn't work.
                            printf '%s\n' "export PATH=$install_dir/google-cloud-sdk/bin:$PATH" >> "$BASH_ENV"
                          fi

                          # shellcheck disable=SC1090
                          . "$BASH_ENV"
                          if ! command -v gcloud > /dev/null 2>&1; then return 1; fi
                          printf '%s\n' "Google Cloud SDK version: $(gcloud --version)"
                        }

                        uninstall() {
                          if ! command -v sudo > /dev/null 2>&1; then
                            printf '%s\n' "sudo is required to uninstall the Google Cloud SDK."
                            printf '%s\n' "Please install it and try again."
                            return 1
                          fi

                          # Set sudo to work whether logged in as root user or non-root user.
                          if [ "$(id -u)" -eq 0 ]; then sudo=""; else sudo="sudo"; fi

                          local installation_directory
                          installation_directory="$(gcloud info --format='value(installation.sdk_root)')"

                          local config_directory
                          config_directory="$(gcloud info --format='value(config.paths.global_config_dir)')"

                          # shellcheck disable=SC2086 # $sudo is not a variable, it's a command.
                          $sudo rm -rf "$installation_directory" || return 1

                          # shellcheck disable=SC2086 # $sudo is not a variable, it's a command.
                          $sudo rm -rf "$config_directory" || return 1
                        }

                        # Check if curl is installed
                        if ! command -v curl > /dev/null 2>&1; then
                          printf '%s\n' "curl is required to install the Google Cloud SDK."
                          printf '%s\n' "Please install it and try again."
                          exit 1
                        fi

                        # Figure out what is latest version available if "latest" is passed as an argument.
                        version="$ORB_VAL_VERSION"
                        [ "$version" = "latest" ] && fetch_latest_version

                        if command -v gcloud > /dev/null 2>&1; then
                          installed_version="$(gcloud version | head -n 1 | sed 's/Google Cloud SDK \([0-9]*.[0-9]*.[0-9]*\)/\1/')"

                          if [ "$installed_version" != "$version" ]; then
                            printf '%s\n' "The version installed ($installed_version) differs from the version requested ($version)."
                            printf '%s\n' "Uninstalling v${installed_version}..."
                            if ! uninstall; then printf '%s\n' "Failed to uninstall the current version."; exit 1; fi

                            printf '%s\n' "Installing v${version}..."
                            if ! install "$version"; then printf '%s\n' "Failed to install the requested version."; exit 1; fi
                          else
                            printf '%s\n' "The version installed ($installed_version) matches the version requested ($version)."
                            printf '%s\n' "Skipping installation."
                          fi
                        else
                          printf '%s\n' "Google Cloud SDK is not installed. Installing it."
                          if ! install "$version"; then printf '%s\n' "Failed to install the requested version."; exit 1; fi
                        fi

                        # Install user provided gcloud components
                        if [ -n "$ORB_VAL_COMPONENTS" ]; then
                          set -f
                          for component in $ORB_VAL_COMPONENTS; do
                              set -- "$@" "$component"
                          done
                          set +f

                          gcloud components install "$@"
                        fi
                    environment:
                        ORB_VAL_COMPONENTS: <<parameters.components>>
                        ORB_VAL_VERSION: <<parameters.version>>
                    name: Install latest gcloud CLI version, if not available
        setup:
            description: |
                Install and initialize the gcloud CLI. When installing within the Docker executor, the
                install will only occur if the CLI isn't already installed. If installing in
                a Linux machine image, it will remove the pre_installed version and instead
                install the version specified by this orb.
            parameters:
                components:
                    default: ""
                    description: |
                        The list of gcloud components to install. Space separated. See https://cloud.google.com/sdk/docs/components for additional info.
                    type: string
                gcloud_service_key:
                    default: GCLOUD_SERVICE_KEY
                    description: |
                        Name of environment variable storing the full service key JSON file
                        for the Google project.
                    type: env_var_name
                gcp_cred_config_file_path:
                    default: ~/gcp_cred_config.json
                    description: Output location of OIDC credentials.
                    type: string
                google_compute_region:
                    default: GOOGLE_COMPUTE_REGION
                    description: |
                        Name of environment variable storing the Google compute region to set as
                        default for the gcloud CLI.
                    type: env_var_name
                google_compute_zone:
                    default: GOOGLE_COMPUTE_ZONE
                    description: |
                        Name of environment variable storing the Google compute zone to set as
                        default for the gcloud CLI.
                    type: env_var_name
                google_project_id:
                    default: GOOGLE_PROJECT_ID
                    description: |
                        Name of environment variable storing the Google project ID to set as
                        default for the gcloud CLI.
                    type: env_var_name
                google_project_number:
                    default: GOOGLE_PROJECT_NUMBER
                    description: |
                        Name of environment variable storing the Google project number
                        used to configure OIDC.
                    type: env_var_name
                service_account_email:
                    default: OIDC_SERVICE_ACCOUNT_EMAIL
                    description: Environment variable containing OIDC service account email.
                    type: env_var_name
                use_oidc:
                    default: false
                    description: Set to true to enable OIDC
                    type: boolean
                version:
                    default: latest
                    description: |
                        The version of the gcloud CLI to install. If left to "latest", the latest version will be installed. Otherwise, provide the full version number as it appears in the URL on this page: https://cloud.google.com/sdk/docs/downloads-versioned-archives
                    type: string
                workload_identity_pool_id:
                    default: OIDC_WIP_ID
                    description: |
                        Environment variable containing OIDC configured workload identity pool is stored.
                    type: env_var_name
                workload_identity_pool_provider_id:
                    default: OIDC_WIP_PROVIDER_ID
                    description: |
                        Environment variable containing OIDC configured workload identity pool provider ID is stored.
                    type: env_var_name
            steps:
                - install:
                    components: << parameters.components >>
                    version: << parameters.version >>
                - run:
                    command: |
                        #!/usr/bin/env bash

                        # Expand parameters
                        readonly service_key=${!ORB_ENV_SERVICE_KEY}
                        readonly project_id=${!ORB_ENV_PROJECT_ID}
                        readonly compute_zone=${!ORB_ENV_COMPUTE_ZONE}
                        readonly compute_region=${!ORB_ENV_COMPUTE_REGION}

                        # Eval parameters
                        cred_file_path=$(eval "echo $ORB_EVAL_CRED_FILE")

                        # Store service account
                        printf '%s\n' "$service_key" > "$HOME"/gcloud-service-key.json

                        # Initialize gcloud CLI
                        gcloud --quiet config set core/disable_usage_reporting true
                        gcloud --quiet config set component_manager/disable_update_check true

                        # Use oidc
                        if [ "$ORB_VAL_USE_OIDC" = 1 ]; then
                          echo "Authorizing using OIDC token"

                          if [ -z "$CIRCLE_OIDC_TOKEN" ]; then
                            echo "Ensure this job has a context to populate OIDC token"
                            echo "See more: https://circleci.com/docs/openid-connect-tokens/#openid-connect-id-token-availability"
                            exit 1
                          fi

                          echo "$CIRCLE_OIDC_TOKEN" > "$HOME/oidc_token"
                          # Store OIDC token in temp file
                          gcloud iam workload-identity-pools create-cred-config \
                              "projects/${!ORB_ENV_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${!ORB_ENV_POOL_ID}/providers/${!ORB_ENV_POOL_PROVIDER_ID}" \
                              --service-account="${!ORB_ENV_SERVICE_EMAIL}" \
                              --credential-source-type="text" \
                              --credential-source-file="$HOME/oidc_token" \
                              --output-file="$cred_file_path"

                          # Configure gcloud to leverage the generated credential configuration
                          gcloud auth login --brief --cred-file "$cred_file_path"
                          # Configure ADC
                          echo "export GOOGLE_APPLICATION_CREDENTIALS='$cred_file_path'" | tee -a "$BASH_ENV"
                        else
                          gcloud auth activate-service-account --key-file="$HOME"/gcloud-service-key.json
                        fi

                        gcloud --quiet config set project "$project_id"

                        if [[ -n "$compute_zone" ]]; then
                          gcloud --quiet config set compute/zone "$compute_zone"
                        fi

                        if [[ -n "$compute_region" ]]; then
                          gcloud --quiet config set compute/region "$compute_region"
                        fi
                    environment:
                        ORB_ENV_COMPUTE_REGION: <<parameters.google_compute_region>>
                        ORB_ENV_COMPUTE_ZONE: <<parameters.google_compute_zone>>
                        ORB_ENV_POOL_ID: <<parameters.workload_identity_pool_id>>
                        ORB_ENV_POOL_PROVIDER_ID: <<parameters.workload_identity_pool_provider_id>>
                        ORB_ENV_PROJECT_ID: <<parameters.google_project_id>>
                        ORB_ENV_PROJECT_NUMBER: <<parameters.google_project_number>>
                        ORB_ENV_SERVICE_EMAIL: <<parameters.service_account_email>>
                        ORB_ENV_SERVICE_KEY: <<parameters.gcloud_service_key>>
                        ORB_EVAL_CRED_FILE: <<parameters.gcp_cred_config_file_path>>
                        ORB_VAL_USE_OIDC: <<parameters.use_oidc>>
                    name: Initialize gcloud CLI to connect to Google Cloud
    executors:
        default:
            description: The default executor is the CircleCI Python Convenience Image.
            docker:
                - image: cimg/python:<<parameters.version>>
            parameters:
                version:
                    default: "3.7"
                    description: |
                        Python version to use. Take into account the versions of Python available
                        from CircleCI (https://hub.docker.com/r/cimg/python/tags) as well as what
                        is supported by gcloud CLI itself (https://cloud.google.com/sdk/docs/install).
                    type: string
        google:
            description: The official Google Docker image with gcloud SDK and CLI pre-installed.
            docker:
                - image: google/cloud-sdk:<<parameters.sdk-version>>
            parameters:
                sdk-version:
                    default: latest
                    description: |
                        What version of the Google Cloud SDK Docker image? For full options, see https://hub.docker.com/r/google/cloud-sdk/tags
                    type: string
        machine:
            description: |
                CircleCI's machine executor:
                https://circleci.com/docs/2.0/executor-types/#using-machine
            machine:
                image: <<parameters.image>>
            parameters:
                image:
                    default: ubuntu-2204:current
                    description: |
                        Which machine executor image to use. For details, see
                        https://circleci.com/docs/2.0/configuration-reference/#machine
                    type: string
    examples:
        setup:
            description: Install and initalize the gcloud CLI.
            usage:
                version: "2.1"
                orbs:
                    gcp-cli: circleci/gcp-cli@2.4.1
                jobs:
                    use-gcp:
                        executor: gcp-cli/default
                        steps:
                            - gcp-cli/setup:
                                version: 404.0.0
                workflows:
                    install_and_configure_cli:
                        jobs:
                            - use-gcp:
                                context: myContext

jobs:
  build:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - gcp-cli-modified/install:
          version: '409.0.0'
